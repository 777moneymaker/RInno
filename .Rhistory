length(config$host[[1]])
config$host[[1]]
config$ow[[1]]
config$pw[[1]]
config$pw
config$app_repo[[1]]
source('~/Rinno/R/create_config.R')
create_config('test_app', '3.3.2', dir_in = 'inst/app')
config <- jsonlite::fromJSON('inst/app/config.cfg')
config$app_repo[[1]]
get_remote_version(
host      = config$host[[1]],
app_repo  = config$app_repo[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
source('~/RInno/inst/deployment/get_remote_version.R')
get_remote_version(
host      = config$host[[1]],
app_repo  = config$app_repo[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
remote_version <- get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
is.null(remote_version)
length(remote_version)
source('~/RInno/inst/deployment/get_remote_version.R')
remote_version <- get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
api_response <- get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
remote_version = api_response
p$Version[p$Package == config$appname]
p$Version[p$Package == config$appname] == '0.0.5'
if (p$Version[p$Package == config$appname] == '0.0.5') print("yay")
local_version <- p$Version[p$Package == config$appname]
local_version != api_response
length(local_version) == 0
local_version != api_response | length(local_version) == 0
any(local_version != api_response, length(local_version) == 0)
example('start_iss')
vignette(package = 'RInno')
vignette('Introduction', package = 'RInno')
document()
document()
library(RInno)
document()
document()
document()
library(RInno)
?use_vignette
devtools::use_vignette('Continuous Deployment')
config$logging
Sys.getenv("HOME")
progs <- c(list.dirs('C:/Program Files', T, F),
list.dirs('C:/Program Files (x86)', T, F))
chrome <- progs[grep('Chrome', progs)]
chrome <- progs[grep('Google', progs)]
ie     <- progs[grep('Internet Explorer')]
ie     <- progs[grep('Internet Explorer', progs)]
ie
chrome <- list.files(progs[grep('Google', progs)], 'Chrome')
chrome <- list.files(progs[grep('Google', progs)], 'Chrome', full.names = T)
ie     <- progs[grep('Internet Explorer', progs)][1]
?winDialogString
app_name <- config$appname
winDialogString(
message = sprintf('%s cannot find your browser. Please provide the path to its .exe file.', app_name),
default = 'C:/Program Files (x86)/Google/Chrome/Application/Chrome.exe')
config$browser = "C:/Program Files (x86)/Google/Chrome/Application/Chrome.exe"
config
getwd()
jsonlite::write_json(config, 'config.cfg')
config <- jsonlite::fromJSON('config.cfg')
config$browser
progs[grep('Google', progs)]
choose.files()
Sys.getenv()
Sys.getenv('ProgramW6432')
choose.files(default = Sys.getenv('ProgramW6432'))
choose.files(
default = Sys.getenv('ProgramW6432'),
caption = sprintf('%s cannot find your browser. Please select its .exe file.', app_name))
choose.files(
default = Sys.getenv('ProgramW6432'),
caption = sprintf('%s cannot find your browser. Please select its .exe file.', app_name))
sprintf('library/%s/app', app_name)
find_browser <- function(app_name) {
progs <- c(list.dirs('C:/Program Files', T, F),
list.dirs('C:/Program Files (x86)', T, F))
chrome <- file.path(progs[grep('Google', progs)],
'Chrome/Application/Chrome.exe')
ie     <- file.path(progs[grep('Internet Explorer', progs)][1],
'iexplore.exe')
if (file.exists(chrome)) {# First choice
# Set the default browser option for shiny apps to chrome
options(browser = chrome)
} else if (file.exists(ie)) {# Not ideal
# Set the default browser option for shiny apps to ie
options(browser = ie)
} else {
# Ask the user to find their browser
manual_browser = choose.files(
default = Sys.getenv('ProgramW6432'),
caption = sprintf('%s cannot find your browser. Please select its .exe file.', app_name))
# Store the result
config$browser <- manual_browser
jsonlite::write_json(config, 'config.cfg')
# Set the default browser option for shiny apps
options(browser = manual_browser)
}
}
find_browser(app_name)
getOption('browser')
config$browser = getOption('browser')
jsonlite::write_json(config, 'config.cfg')
config <- jsonlite::fromJSON('config.cfg')
app_name <- config$appname
file.exists(config$browser)
Sys.getenv()
runApp
shiny::runApp
getOption("shiny.launch.browser",
interactive())
length(config$app_repo[[1]])
sprintf('library/%s/app', config$appname)
formals(create_config)
document()
library(RInno)
build_vignettes()
build_vignettes()
library(RInno)
document()
library(RInno)
library(RInno)
devtools::use_vignette('Deployment')
devtools::clean_vignettes()
devtools::build_vignettes()
library(RInno)
system.file('app', 'RInno')
system.file('app', package = 'RInno')
test <- 'https://bitbucket.org/fi_consulting/mptr'
grepl('bitbucket', test)
app_repo_url <- test
if (grepl('bitbucket.org', app_repo_url)) host <- 'bitbucket'
basename(test)
grepl('bitbucket.org', app_repo_url)
grepl('bitbucket.org', NULL)
if (grepl('bitbucket.org', NULL)) host <- 'bitbucket'
basename(app_repo_url)
dirname(app_repo_url)
dirname(dirname(app_repo_url))
strsplit(app_repo_url, '.')
strsplit(app_repo_url, '\.')
strsplit(app_repo_url, '\\.')
strsplit(app_repo_url, '\\.')[[1]][2]
sub('.*/', '', strsplit(app_repo_url, '\\.')[[1]][2])
sub('.{3}/', '', strsplit(app_repo_url, '\\.')[[1]][2])
strsplit(app_repo_url, 'org|com')[[1]][2]
strsplit(app_repo_url, 'org/|com/')[[1]][2]
app_repo_url
numeric_version('0.1.0') == numeric_version('0.1')
# Your first release
numeric_version('0.0.1') > numeric_version('0.0.0.9000')
build_vignettes()
document()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
library(RInno)
create_config('myapp', '3.3.2', 'inst/app')
source('~/Rinno/inst/deployment/get_remote_version.R')
get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
jsonlite::fromJSON('inst/app/config.cfg')
config <- jsonlite::fromJSON('inst/app/config.cfg')
get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
source('~/Rinno/inst/deployment/get_remote_version.R')
get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
create_config('mptr', '3.3.2', 'inst/app', app_repo_url = 'https://bitbucket.org/fi_consulting/mptr', auth_user = 'Dripdrop12', pw = 'fic@11010701')
config <- jsonlite::fromJSON('inst/app/config.cfg')
get_remote_version(
app_repo  = config$app_repo[[1]],
host      = config$host[[1]],
auth_user = config$auth_user[[1]],
pw        = config$pw[[1]])
create_app('myapp')
library(RInno)
create_app('myapp', 'inst/app')
paste0('AppId = {{',
paste0(lapply(lapply(c(8, 4, 4, 4, 12), stringi::stri_rand_strings, length = 1, pattern = '[A-Z0-9]'), paste0, collapse = ''), collapse = '-'), '}')
library(RInno)
create_app('myapp', 'inst/app')
compile_iss()
create_app('myapp', 'inst/app')
compile_iss()
library(RInno)
create_app('myapp', 'inst/app')
compile_iss()
create_app('myapp', 'inst/app')
compile_iss()
library(RInno)
library(RInno)
create_app('myapp', 'inst/app')
require(RInno)
create_app('myapp', 'inst/app')
compile_iss()
packageVersion('RInno')
?packageVersion
packageDescription('RInno')
installed.packages()
require(RInno)
create_config('myapp', '3.3.2', 'inst/app')
config <- jsonlite::fromJSON('inst/app/config.cfg')
packageVersion(config$appname[[1]])
try(packageVersion(config$appname[[1]]))
local_version <- try(packageVersion(config$appname[[1]]))
class(local_version)
onfig$appname[[1]]
config$appname[[1]]
class(local_version) == 'try-error'
row.names(installed.packages())
row.names(installed.packages())
cat("\nThat is not a valid .EXE URL. \nThis is likely to have happened because there was a change in the URL of the installer file in the download page of the software. \n\nThis might have already been fixed in the latest version of RInno. Install the latest version using devtools::install_github('Dridrop12/RInno') and try again.\n\nIf this doesn't help please submit an issue, and let me know this function needs updating/fixing (please include the output of sessionInfo() ) - thanks!\n")
require(devtools)
build_vignettes()
document()
library(RInno)
document()
library(RInno)
create_app('myapp', 'inst/app', include_R = TRUE)
create_app('myapp', 'inst/app', include_R = TRUE)
compile_iss()
require(httr)
?oauth2.0_token
demo(package = 'httr')
demo('oauth2-github', package = 'httr')
oauth_endpoints('bitbucket')
?oauth_endpoints
?oauth_endpoint
oauth_endpoint(authorize = 'https://bitbucket.org/site/oauth2/authorize?client_id={client_id}&response_type=code')
oauth_endpoint(access = 'https://bitbucket.org/site/oauth2/access_token',
base_url = 'https://bitbucket.org/site/oauth2/authorize')
oauth_endpoint(authorize = https://bitbucket.org/site/oauth2/authorize', access = 'https://bitbucket.org/site/oauth2/access_token',
base_url = 'https://bitbucket.org/site/oauth2/authorize')
oauth_endpoint(authorize = 'https://bitbucket.org/site/oauth2/authorize', access = 'https://bitbucket.org/site/oauth2/access_token',
base_url = 'https://bitbucket.org/site/oauth2/authorize')
bitbucket <- oauth_endpoint(authorize = 'https://bitbucket.org/site/oauth2/authorize', access = 'https://bitbucket.org/site/oauth2/access_token',
base_url = 'https://bitbucket.org/site/oauth2/authorize')
myapp <- oauth_app('RInno', key = 'y85hXLkQCQLMk9SpFS', secret = 'CmPWSgX73sdLvpj2ef5qbfWqRsmhB7nw')
myapp
oauth_endpoints('bitbucket')
bitbucket_token <- oauth2.0_token(bitbucket, myapp)
bitbucket
bitbucket <- oauth_endpoint(authorize = 'https://bitbucket.org/site/oauth2/authorize', access = 'https://bitbucket.org/site/oauth2/access_token',
base_url = 'https://bitbucket.org/')
bitbucket
bitbucket_token <- oauth2.0_token(bitbucket, myapp)
bitbucket_token <- oauth2.0_token(bitbucket, myapp)
require(devtools)
build_vignettes()
document()
library(RInno)
?.onLoad
library(RInno)
.onLoad <- function(libname, pkgname) {
op <- options()
op.devtools <- list(
RInno.desc.author = '"Jonathan Hill <hill@ficonsulting.com> [aut, cre]"',
RInno.desc.license = "GPL 2.0"
)
toset <- !(names(op.devtools) %in% names(op))
if(any(toset)) options(op.devtools[toset])
packageStartupMessage('RInno 0.0.0.9001 by FI Consulting, Inc.\nwww.ficonsulting.com\nLicense: GPLv2')
invisible()
}
require(RInno)
library(RInno)
library(RInno)
library(RInno)
library(RInno)
packageStartupMessage('RInno 0.0.0.9001 by FI Consulting, Inc.\nwww.ficonsulting.com\nLicense: GPLv2')
.onAttach <- function(libname, pkgname) {
packageStartupMessage('RInno 0.0.0.9001 by FI Consulting, Inc.\nwww.ficonsulting.com\nLicense: GPLv2')
}
library(RInno)
library(RInno)
packageDescription('RInno')
library(RInno)
packageDescription('RInno')
packageDescription('RInno')[['Version']]
packageDescription('RInno')[['URL']]
packageDescription('RInno')[['Author']]
as.person(packageDescription('RInno')[['Author']])
packageDescription('RInno')[['Author']]
obj <- packageDescription('RInno', fields = c('Author', 'Version'))
obj
packageDescription('RInno')
packageDescription('RInno',
fields = c('Version', 'Maintainer', 'License', 'URL'))
library(RInno)
library(RInno)
cat(packageDescription('RInno',
fields = c('Version', 'Maintainer', 'License', 'URL')), sep = '\n')
paste0(packageDescription('RInno',
fields = c('Version', 'Maintainer', 'License', 'URL')), sep = '\n')
packageStartupMessage(
paste0(packageDescription('RInno',
fields = c('Version', 'Maintainer', 'License', 'URL')), sep = '\n')
)
require(RInno)
packageStartupMessage(
paste0(packageDescription('RInno',
fields = c('Version', 'Maintainer', 'License', 'URL')),
sep = '\n')
)
?packageStartupMessage
library(RInno)
library(RInno)
require(RInno)
library(RInno)
require(RInno)
require(devtools)
?use_readme_rmd
use_news_md()
use_readme_rmd()
library(RInno)
devtools::check()
?packageStartupMessage
?packageDescription
ispp_doc()
devtools::check()
devtools::check()
require(RInno)
library(RInno)
require(RInno)
document()
devtools::document()
library(RInno)
devtools::build_vignettes()
library(RInno)
sprintf('test %s', NULL)
inst_pw     = NULL
is.null(inst_pw)
progs <- c(list.dirs('C:/Program Files', T, F),
list.dirs('C:/Program Files (x86)', T, F))
inno <- progs[grep('Inno Setup', progs)]
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll', inno)
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll')
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll', inno)
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll', getwd())
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll', tempfile())
temp <- tempfile()
download.file('http://www.jrsoftware.org/download.php/iscrypt.dll', temp)
file.copy(temp, inno)
file.copy(temp, getwd())
file.copy(temp, file.path(getwd(), 'ISCrypt.dll'))
opts <- c('Name: "english"; MessagesFile: "compiler:Default.isl"',
'Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"',
'Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"',
'Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"',
'Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"',
'Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"',
'Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"',
'Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"',
'Name: "french"; MessagesFile: "compiler:Languages\French.isl"',
'Name: "german"; MessagesFile: "compiler:Languages\German.isl"',
'Name: "greek"; MessagesFile: "compiler:Languages\Greek.isl"',
'Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"',
'Name: "hungarian"; MessagesFile: "compiler:Languages\Hungarian.isl"',
'Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"',
'Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"',
'Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"',
'Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"',
'Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"',
'Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"',
'Name: "scottishgaelic"; MessagesFile: "compiler:Languages\ScottishGaelic.isl"',
'Name: "serbiancyrillic"; MessagesFile: "compiler:Languages\SerbianCyrillic.isl"',
'Name: "serbianlatin"; MessagesFile: "compiler:Languages\SerbianLatin.isl"',
'Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"',
'Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"',
'Name: "turkish"; MessagesFile: "compiler:Languages\Turkish.isl"',
'Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"')
supported_languages <- c("english",
"brazilianportuguese",
"catalan",
"corsican",
"czech",
"danish",
"dutch",
"finnish",
"french",
"german",
"greek",
"hebrew",
"hungarian",
"italian",
"japanese",
"norwegian",
"polish",
"portuguese",
"russian",
"scottishgaelic",
"serbiancyrillic",
"serbianlatin",
"slovenian",
"spanish",
"turkish",
"ukrainian")
language <- c('english', 'chinse')
language %in%  supported_languages
any(language %in%  supported_languages)
?any
all(language %in% supported_languages
)
selected_languages <- language %in% supported_languages
language[selected_languages]
unsupported_language <- language[!language %in% supported_languages]
if (!all(language %in% supported_languages)) {
stop(sprintf('%s is not supported.', unsupported_language))
}
selected_languages
selected_opts <- opts[supported_languages %in% language]
opts <- c('Name: "english"; MessagesFile: "compiler:Default.isl"',
'Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\\BrazilianPortuguese.isl"',
'Name: "catalan"; MessagesFile: "compiler:Languages\\Catalan.isl"',
'Name: "corsican"; MessagesFile: "compiler:Languages\\Corsican.isl"',
'Name: "czech"; MessagesFile: "compiler:Languages\\Czech.isl"',
'Name: "danish"; MessagesFile: "compiler:Languages\\Danish.isl"',
'Name: "dutch"; MessagesFile: "compiler:Languages\\Dutch.isl"',
'Name: "finnish"; MessagesFile: "compiler:Languages\\Finnish.isl"',
'Name: "french"; MessagesFile: "compiler:Languages\\French.isl"',
'Name: "german"; MessagesFile: "compiler:Languages\\German.isl"',
'Name: "greek"; MessagesFile: "compiler:Languages\\Greek.isl"',
'Name: "hebrew"; MessagesFile: "compiler:Languages\\Hebrew.isl"',
'Name: "hungarian"; MessagesFile: "compiler:Languages\\Hungarian.isl"',
'Name: "italian"; MessagesFile: "compiler:Languages\\Italian.isl"',
'Name: "japanese"; MessagesFile: "compiler:Languages\\Japanese.isl"',
'Name: "norwegian"; MessagesFile: "compiler:Languages\\Norwegian.isl"',
'Name: "polish"; MessagesFile: "compiler:Languages\\Polish.isl"',
'Name: "portuguese"; MessagesFile: "compiler:Languages\\Portuguese.isl"',
'Name: "russian"; MessagesFile: "compiler:Languages\\Russian.isl"',
'Name: "scottishgaelic"; MessagesFile: "compiler:Languages\\ScottishGaelic.isl"',
'Name: "serbiancyrillic"; MessagesFile: "compiler:Languages\\SerbianCyrillic.isl"',
'Name: "serbianlatin"; MessagesFile: "compiler:Languages\\SerbianLatin.isl"',
'Name: "slovenian"; MessagesFile: "compiler:Languages\\Slovenian.isl"',
'Name: "spanish"; MessagesFile: "compiler:Languages\\Spanish.isl"',
'Name: "turkish"; MessagesFile: "compiler:Languages\\Turkish.isl"',
'Name: "ukrainian"; MessagesFile: "compiler:Languages\\Ukrainian.isl"')
selected_opts <- opts[supported_languages %in% language]
source('~/Rinno/R/languages.R')
languages('test', c('english', 'chinese'))
languages('test', c('english', 'spanish'))
library(RInno)
create_app('myapp', 'inst/app')
compile_iss()
setup('test')
setup('test', 'yourass')
source('~/Rinno/R/setup.R')
source('~/Rinno/R/setup.R')
setup('test', 'yourass')
source('~/Rinno/R/setup.R')
setup('test', 'yourass')
library(RInno)
create_app('myapp', 'inst/app')
compile_iss()
library(RInno)
create_app('myapp', 'inst/app', inst_pw = 'iloveu')
compile_iss()
library(RInno)
create_app('myapp', 'inst/app', inst_pw = 'iloveu')
compile_iss()
library(RInno)
create_app('myapp', 'inst/app', inst_pw = 'iloveu')
compile_iss()
devtools::check()
devtools::check()
library(RInno)
devtools::document()
library(RInno)
library(RInno)
require(devtools)
document()
build_vignettes()
library(RInno)
create_app('Roman', 'inst/app')
compile_iss()
library(RInno)
create_app('Roman', 'inst/app')
compile_iss()
